//Number of columns for the grid.
@columns: 12;

//How much space to the left and right of each column. In %.
@gutter: 1%;

//How large is the container?
@containerSize: 1080px;


*{ box-sizing: border-box; }

.container {
	position: relative;
	max-width: @containerSize;
	width: 90%;
	margin: 0 auto;
	padding: 0 20px;
}

.fullContainer {
	position: relative;
	width: 100%;
	margin: 0 auto;
	padding: 0 20px;
}

.row{
	width: 100%;
	clear: both;

	&> div:first-child {
		margin-left: 0;
	}
}

.container:after,
.row:after {
  content: "";
  display: table;
  clear: both; 
}

@media screen and (max-width:@containerSize) {
	.container{
		width: 100%;
		padding-left: 30px;
		padding-right: 30px;
	}
}


// Generators


// Basic grid generator. Generates @n columns with an @g margin (gutter)
// (ex) .columns(6) for a 6 column width item.

.columns(@i) {
	width: (@i * 100% / @columns) - @gutter + ((@gutter / @columns) * @i);
	margin-left: @gutter;
	box-sizing: border-box;
	float: left;

	@media screen and (max-width:@containerSize) {
		width: 100%;
		float: none;
		margin-left: 0;
	}
}

// Generates an Offset col (Padding to the left)
// (ex) .columns(11) .offset(1) for a 10 column, 1 offset item. (Column # must take into account the offset as it is padding)

.offset(@i){
	padding-left: ((@i * 100% / @columns) - @gutter + ((@gutter / @columns) * @i)) + @gutter;
}

// Generates a grid with @n columns and no gutter
// (ex) .columns--ng(6) for a 6 column width item that has no gutter (best used together with multiple NG items, such as .columns--ng(6) * 2 )

.columns--ng(@i) {
	width: (@i * 100% / @columns);
	margin-left: 0 !important;
	box-sizing: border-box;
	float: left;

	@media screen and (max-width:@containerSize) {
		width: 100%;
		float: none;
		margin-left: 0;
	}
}

